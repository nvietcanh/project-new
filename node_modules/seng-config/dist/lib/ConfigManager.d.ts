import IConfig from "./IConfig";
import IURLData from "./IURLData";
/**
 * @namespace app.config
 * @class ConfigManager
 */
declare class ConfigManager {
    private _config;
    private _parsedConfig;
    private _environment;
    private _varRegExp;
    /**
     *
     * @todo define config
     * @method init
     * @param {IConfig} config
     * @param {string} environment
     */
    init(config: IConfig, environment: string): void;
    /**
     * Gets the current environment
     *
     * @method getEnvironment
     * @returns {string}
     */
    getEnvironment(): string;
    /**
     * Sets the new environment, causes a re-render of the config
     *
     * @method setEnvironment
     * @param {string} environment
     * @return {void}
     */
    setEnvironment(environment: string): void;
    /**
     * Checks if we have a certain environment
     *
     * @method hasEnvironment
     * @param {string} environment
     * @returns {boolean}
     */
    hasEnvironment(environment: string): boolean;
    /**
     * Get a URL by it name.
     * This method throws an error if a URL with the provided name doesn't exists.
     *
     * @method getURL
     * @param {string} name
     * @param {any} variables
     * @returns {string}
     */
    getURL(name: string, variables?: {
        [key: string]: any;
    }): string;
    /**
     * Gets a certain URL Configuration.
     * This method throws an error if a URL with the provided name doesn't exists.
     *
     * @method getURLConfig
     * @param {string} name
     * @returns {IURLData}
     */
    getURLConfig(name: string): IURLData;
    /**
     * Opens a (popup) URL by it's name.
     * This method throws an error if a URL with the provided name doesn't exists.
     *
     * @method openURL
     * @param {string} name
     * @param {any} variables When an object, it will be used to replace variables. when a function, it will call that function before opening the url so you can change the url yourself to have more control.
     * @return void
     */
    openURL(name: string, variables?: {
        [key: string]: any;
    }): void;
    openURL(name: string, variables?: (url: string) => string): void;
    /**
     * Checks if a certain url exists.
     *
     * @method hasURL
     * @param {string} name
     * @returns {boolean}
     */
    hasURL(name: string): boolean;
    /**
     * Gets a certain var
     *
     * @method getVariable
     * @param {string} name
     * @returns {any}
     */
    getVariable(name: string): any;
    /**
     * Sets a variable to a new value, causes re-render of the config for all urls
     *
     * @method setVariable
     * @param {string} name
     * @param {string} value
     */
    setVariable(name: string, value: any): void;
    /**
     * Checks if a certain variable exists
     *
     * @method hasVariable
     * @param {string} name
     * @returns {boolean}
     */
    hasVariable(name: string): boolean;
    /**
     * Gets a certain property
     *
     * @method getProperty
     * @param {string} name
     * @returns {any}
     */
    getProperty(name: string): any;
    /**
     * Gets the properties object
     *
     * @method getProperties
     * @returns {any}
     */
    getProperties(): any;
    /**
     * Checks if a property exists
     *
     * @method hasProperty
     * @param {string} name
     * @returns {boolean}
     */
    hasProperty(name: string): boolean;
    /**
     * Gets the parsed config based on the current environment
     * @method getConfig
     * @returns {IConfig}
     */
    getConfig(): IConfig;
    /**
     * Gets the raw config, including all environments
     *
     * @method getRawConfig
     * @returns {IConfig}
     */
    getRawConfig(): IConfig;
    /**
     * Re-renders the config based on the current environment
     *
     * @method render
     * @return void
     */
    render(): void;
    private replaceVars(subject, variables?);
}
export default ConfigManager;
